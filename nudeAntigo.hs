-- Esse arquivo √© para quem est√° desesperado com a prova de Papis
-- ao ponto para pagar esse arquivo com um Nude
-- Muito Obrigado! („Å£Ôºæ‚ñøÔºæ)€∂üç∏üåüüç∫Ÿ©(Àò‚ó°Àò )

-- Ok, Bora l√°

-- [ Parte 1 ] -----------------------------------------------------------------

-- Haskell √© uma linguagem funcional e, no geral, relembra matem√°tica
-- Por exemplo, defini√ß√µes:

x = 10

-- Isso √© uma defini√ß√£o! **Definimos** que x equivale ao valor 10
-- Ou seja, assim como na matem√°tica, sempre que voc√™ utiliza x em
-- algum calculo, √© a mesma coisa que substituir todo x por 10
-- Abaixo mais alguns exemplos de defini√ß√µes:

notaDe50 = 50
tamanhoDoPai = 1.8
pi = 3.1415
prof = "Giovanny"
coracao = "S2"
homofobicos = ["eu", "salnorabo"] -- VSF salnorabo

-- PS: Se vc tem um bom olho, percebeu que em alguns exemplos n√£o utilizei acentos.
--     Em Haskell, n√£o podemos utilizar acentos entre outras coisas fora da lingua inglesa para definir,
--     Entretanto voc√™ pode utilizar acentos em coment√°rios como esses (e em strings, veremos √† frente)
--     Inclusive, para escrever coment√°rios √© s√≥ digitar: -- 
--     Tudo, na mesma linha, √† direita de -- ser√° um coment√°rio

-- Assim Como na matem√°tica, voc√™ n√£o pode definir uma coisa com dois valores ao mesmo tempo

exemplo = "isso pode" -- 1¬∞ Defini√ß√£o
exemplo = "isso n√£o pode" -- 2¬∞ Defini√ß√£o
-- Isso causar√° um erro

-- Outra coisa vinda da matem√°tica s√£o fun√ß√µes (Imagina se programa√ß√£o funcional n√£o tivesse fun√ß√µes kk)
-- Como na matem√°tica, uma fun√ß√£o √© um valor que depende (e consequentemente varia) de outro valor
-- Assim:

dobro x = x * 2

-- Generalizando:

-- <Nome da fun√ß√£o> <argumento> = <calculo>

-- essa sintaxe lembra, de novo, a matem√°tica. Inclusive √© possivel ler a fun√ß√£o de forma semelhante:
-- matem√°tica: f de x igual a x vezes 2
-- Haskell S2: dobro de x igual a x vezes 2

-- Inclusive, fun√ß√µes n√£o precisam ter s√≥ um argumento, podem ter quantos argumentos voc√™ precisar!

area x y = x * y
juntaCD cidade estado = (cidade, estado)
bhaskara1 a b c = ((-b) + (b * b - 4 * a * c)**(1/2)) / (2 * a)

adicionaCoracao pessoa cora = pessoa ++ cora
areaCirculo r p = p * r * r

-- Juntando Defini√ß√µes com fun√ß√µes
-- √© interessante usar defini√ß√µes para guardar valores que nunca v√£o mudar
-- Essas ultimas duas fun√ß√µes por exemplo, poderiam ser reescritas como:

adicionaCoracao pessoa = pessoa ++ coracao -- coracao vem da defini√ß√£o l√° de cima
areaCirculo r = pi * r * r -- pi vem da definicao l√° de cima

-- Sim, esse c√≥digo n√£o vai rodar porque eu defini a mesma fun√ß√£o duas vezes, mas √© s√≥ para exemplificar

-- Talvez v√¥ce esteja querendo me perguntar (eu sou apenas uma voz da sua cabe√ßa lendo o texto, seu animal)
-- se n√£o poderia utilizar diretamente os valores de **coracao** e **pi** nas fun√ß√µes **adicionaCoracao**
-- e **areaCirculo**

adicionaCoracao pessoa = pessoa ++ "S2"
areaCirculo r = 3.1415 * r * r

-- Isso √© v√°lido e equivalente aos c√≥digos anteriores, essa √© a "vers√£o substituida" do jeito anterior (com as defini√ß√µes)
-- por√©m usar as defini√ß√µes √© um jeito superior de escrever fun√ß√µes.
-- Digamos que depois de um tempo voc√™ precise trocar o jeito que um cora√ß√£o √© escrito (trocar por um emoji, por exemplo)
-- ou que vc precise usar uma aproxima√ß√£o de pi mais precisa.
-- as Defini√ß√µes centralizam esses valores, o que torna muito f√°cil de modificar esses valores.
-- Claro, nesses exemplos tambem √© facil trocar os valores diretamente, mas quando voc√™ tem v√°rias fun√ß√µes que dependem de um mesmo valor
-- n√£o utilizar Defini√ß√µes torna tudo mais complicado, voc·∫Ω teria que trocar cada valor manualmente, que, alem de tedioso, √© propenso a erros

-- Al√©m disso, voc√™ pode utilizar fun√ß√µes dentro de fun√ß√µes

estaAbaixoDoPeso peso altura = imc < 18.5
imc peso altura = peso / (altura * altura)

-- Isso √© interessante conforme suas fun√ß√µes forem ficando mais complexas e voc√™ precisar de mais e mais dados (me aprofundarei nos beneficios de quebrar um fun√ß√£o em varias depois)
-- Esses exemplos tambem ressaltam duas coisas:
-- - Fun√ß√µes tornam-se valores quando damos um valor para seus argumentos, do mesmo jeito que na matem√°tica: f(x) = 2 * x, f(8) = 2 * 8 = 16.
-- - Argumentos de fun√ß√µes s√≥ existem dentro corpo da fun√ß√µes (O c√°lculo), isso significa que peso e altura n√£o existem fora de suas respectivas fun√ß√µes. o que nos d√° liberdade
--   para usar o mesmo nome de argumento nas fun√ß√µes 

-- [ Parte 2 ] -------------------------------------------------------------------

-- Voc√™ deve ter percebido que na Parte anterior eu criei fun√ß√µes e defini√ß√µes de tipos variados
-- (Ou vc deve ter estranhado a falta da defini√ß√£o em cima das fun√ß√µes. Apressado vc ( ÀòÔ∏πÀò ))
-- Por exemplo:

-- notaDe50 √© um n√∫mero n√£o decimal
-- pi √© um n√∫mero decimal
-- coracao √© um Texto
-- homof√≥bicos √© uma Lista

-- Em Haskell, todos valor √© de um determinado Tipo, vou apresentar voc√™ √† alguns deles:

-- :: Int :: 

-- Int √© o tipo que representa n√∫meros Int-eiros
-- notaDe50 √© uma Defini√ß√£o do Tipo Int

-- Vamos utilizar defini√ß√µes e fun√ß√µes do tipo Int quando tivermos certeza de que o valor ser√° sempre inteiro

-- Exemplos:

notaDe100 = 100
notasDe100EmDinheiro quantidade = quantidade * notaDe100

-- Perceba que com fun√ß√µes, precisamos nos atentar tanto ao tipo dos argumentos quanto no corpo da fun√ß√£o, o calculo em s√≠.
-- N√£o d√° para voc·∫Ω ter uma quantidade fracionada (nunca vi alguem com 3.1415 notas de 100), logo deve ser um valor Int-eiro
-- e notaDe100 √© um valor Int-eiro, como podemos ver acima da fun√ß√£o.
-- Logo, podemos concluir que a fun√ß√£o notasDe100EmDinheiro √© do tipo Int-eiro (Depois veremos que ainda n√£o √© bem assim. Mas por hora, acredite nisso)

-- :: Float :: (Flot kkkkkkkkkk)

-- Float √© o tipo que representa n√∫meros decimais
-- pi (a Defini√ß√£o) √© do Tipo Float
-- Mais uma vez aos exemplos:

euler = 2.7182
alturaEstimada aPai aMae = (aPai + aMae + 0.13) / 2.0

-- Mais uma vez tomemos cuidado com o tipo da Fun√ß√£o, aPai e aMae significam a altura do pai e da m√£e, ent√£o, n√£o necess√°riamente s√£o numeros inteiros,
-- (em 99% dos casos n√£o vai ser, afinal estamos utilizando metros como unidade de medida, mas vai q temos um casal de an√¥es de 1m)
-- ent√£o, √© seguro afirmar que aPai e aMae assumem valores decimais, logo s√£o do tipo Float.
-- No corpo da fun√ß√£o temos uma divis√£o, o numerador √© uma soma de valores decimais, como determinamos acima, logo, o numerador resulta num valor decimal (Float)
-- e no denominador temos o valor 2.0, que √© uma Float, afinal √© decimal (mesmo que seja equivalente a s√≥ 2, veremos depois porqu√™ usei 2.0 especificamente)
-- Dessa forma, temos uma divis√£o de Floats, o que resulta num valor do tipo Float

-- [ Char ] 

-- Esse tipo eu n√£o mostrei ainda (Lista de Char ainda √© Uma Lista e n√£o um char)
-- Char √© o tipo que designa caracteres, ou seja, letras, d√≠gitos, simbolos (N√£o um texto, apenas o caractere)

genereNeutre = 'E'
pergunta = '?'
digito = '3'

-- Como da para perceber, declaramos caracteres escrevendo oque queremos dentro de '', o que √© diferente disso daqui ""
-- esse segundo declara Strings e n√£o caracteres.

-- ... = '<Charactere>'

-- Dado isso, esses caracteres n√£o vem do nada, eles tem base na tabela de ASCII, uma tabela (DUhhhh) que relaciona um n√∫mero √† um caractere
-- https://web.fe.up.pt/~ee96100/projecto/Tabela 20ascii.htm
-- N√£o! N√£o Precisa decorar a tabela! (Pegou a refer√™ncia?)
-- mas √© interessante pegar alguns detalhes, como a letra A ter um valor menor que a letra a

-- Junto a esse Tipo, temos uma dupla de fun√ß√µes, ord e chr, que respectivamente, transformam um Char em seu n√∫mero correspondente da
-- Tabela de ASCII, e transformar um n√∫mero para seu caractere correspondente, tamb√©m da tabela de ASCII

-- Para utiliza-los, voc√™ precisa, antes de tudo, importar uma bibliotecla, a Data.Char

-- assim:

import Data.Char

-- No topo do arquivo
-- Se voc√™ for esperto, √© assim que se importa qualquer biblioteca, n√£o s√≥ a Data.Char

aMaiusculo = ord 'A'
aMinusculo = ord 'a'
letra65 = chr 65
letra97 = chr 97

-- [ Bool ] 

-- Esse tipo √© bem importante
-- √© um tipo que possui apenas dois valores, True ou false (Verdadeiro ou falso)
-- Normalmente usamos bools para "responder" ao nome da Fun√ß√£o ou Declara√ß√£o

ehGay = True
ehHetero = False
colocarPontinhos = True
maiorQue10 x = x > 10

-- Voc√™ deve ter percebido uns sinais de compara√ß√£o, como <, >, <=, >=, ==, /=
-- eles comparam dois valores e retornam um (rufem os tambores!!) Bool, afinal, uma compara√ß√£o
-- ou √© verdadeira, ou √© falsa

multiploDe2 x = mod x 2 == 2 -- mod √© uma fun√ß√£o que retorna o resto da divis√£o inteira de dois n√∫meros inteiros

-- Operadores de bools

-- As vezes, quando criamos uma fun√ß√£o, precisamos de mais informa√ß√µes.
-- por exemplo, para checar se um n√∫mero √© multiplo de 6, ele precisa ser
-- multiplo de 2 e de 3 ao mesmo tempo. Para isso temos o operador && (e)

