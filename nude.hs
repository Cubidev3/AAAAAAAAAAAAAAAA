-- Esse arquivo √© para quem est√° desesperado com a prova de Papis
-- ao ponto para pagar esse arquivo com um Nude
-- Muito Obrigado! („Å£Ôºæ‚ñøÔºæ)€∂üç∏üåüüç∫Ÿ©(Àò‚ó°Àò )

-- Ok, Bora l√°

-- Eu vou passar pelos slides de Papis (Giovanny S2 S2), fazendo algumas das quest√µes (Vou pular se ficar muito igual) e ir explicando meus pensamentos e l√≥gica
-- de como eu cheguei l√°
-- De quebra, se tiver algum assunto que eu perceba ser importante eu darei um destque extra.

-- Agr chega de viadagem e bora pra haskell

-- [ Aula 4 -> Tipos Basicos e Defini√ß√µes ] --------------------------------------------------------------------------------------------------------------------------------------------------

-- :: Exercicios de Fixa√ß√£o ::

-- Escreva a declara√ß√£o de uma fun√ß√£o que:
-- a. Tem como entrada dois inteiros e devolve um booleano

-- Resposta: funcao :: Int -> Int -> Bool

-- Explica√ß√£o: Aqui √© bem simples, de forma generalizada, a Declara√ß√£o de uma fun√ß√£o √© dada por:
--             <Nome da Fun√ß√£o> :: <Tipo do 1¬∞ Argumento> -> <Tipo do 2¬∞ Argumento> -> ... -> <Tipo do n¬∞ Argumento> -> <Tipo da Fun√ß√£o>

--             Ou seja:
--             <Nome da Fun√ß√£o> :: <Tipo do 1¬∞ Argumento> -> <Tipo da Fun√ß√£o> 
--             (apenas um argumento, Ex: dobro :: Int -> Int)
--                                       dobro x = 2 * x

--             <Nome da Fun√ß√£o> :: <Tipo do 1¬∞ Argumento> -> <Tipo do 2¬∞ Argumento> -> <Tipo da Fun√ß√£o>
--             (Fun√ß√£o com 2 argumentos, Ex: areaRetangulo :: Float -> Float -> Float)
--                                           areaRetangulo b h = b * h

--             Acho que deu para entender bem.

--             Lendo o Enunciado temos:

--             Escreva a Declara√ß√£o de uma fun√ß√£o que **tem como entrada dois inteiros**

--             Ou seja, escrever a declara√ß√£o de uma fun√ß√£o que possui 2 argumentos, e ambos s√£o do tipo Int

--             funcao :: Int -> Int -> <Tipo da fun√ß√£o>

--             e **devolve um booleano**

--             Ou seja, quando voc√™ utilizar essa fun√ß√£o, o valor ser√° um bool:

--             funcao :: Int -> Int -> Bool 

--             Chegamos no resultado! ·ïô(^‚ñø^-·ïô)

-- Ps: O tipo da fun√ß√£o corresponde ao Tipo do calculo dentro do corpo da fun√ß√£o (o que vem depois do =)
--     Ex:
--        dobro :: Int -> **Int** (Fun√ß√£o resulta num valor do tipo Int-eiro)
 
--        dobro x = **2 * x**
--        2 * x (Corpo da fun√ß√£o) (Tipo Int-eiro, afinal 2 multiplicado por x (do Tipo Int, definido na declara√ß√£o da fun√ß√£o) resulta sempre num valor Int-eiro)

--     Caso o tipo definido na Declara√ß√£o da fun√ß√£o e o tipo do Corpo da fun√ß√£o estejam em Desacordo, Haskell reclamar√°

--        metade :: Int -> **Int** (A fun√ß√£o √© do tipo Int-eiro)
--        metade x = x / 2 (O corpo da fun√ß√£o n√£o √© do tipo Int-eiro, afinal x (do Tipo Int, definido na declara√ß√£o da fun√ß√£o) dividido por 2 pode retornar um valor fracionado (N√£o Int-eiro))

-- Extra: Uma exemplo de fun√ß√£o que encaixa com a defini√ß√£o dessa quest√£o √©:

--        ehDivisivelPor :: Int -> Int -> Bool
--        ehDivisivelPor x y = mod x y == 0 

--        A l√≥gica dessa quest√£o √© que, um numero x ser√° divis√≠vel por um n√∫mero y, quando a divis√£o inteira de x por y tiver resto igual a 0.
--        Ok, primeiro precisamos pegar esse resto de divis√£o inteiro, felizmente j√° existe uma fun√ß√£o que faz isso: mod
--        mod x y equivale ao resto da divis√£o inteiro de x por y
--        Agora verificamos se esse resto √© igual a 0 usando o operador ==, que retorna True (Verdadeiro) quando os valores √† sua esquerda e √† sua direita forem iguais
--        e False caso contr√°rio.
--        Perceba que o corpo da fun√ß√£o √© do tipo Bool, porque a ultima coisa que ocorre dentro do corpo ( Õ°¬∞( Õ°¬∞ Õú ñ Õ°¬∞( Õ°‚ùõ‚ÄØÕú ñ Õ°‚ùõ) Õ°¬∞ Õú ñ Õ°¬∞) Õ°¬∞) √© uma compara√ß√£o de igualdade, que √© sempre do tipo bool

-- Krl, eu n√£o esperava que iria escrever tanto sobre uma quest√£o t√£o simples, mas eu espero que tenha sido minimamente √∫til (…î‚óî‚Äø‚óî)…î ‚ô•
-- Vou tentar ser mais breve

-- b. Tem como entrada um inteiro e um char e devolve um float

-- Vou considerar que voc√™ leu a explica√ß√£o do item anterior, se n√£o esse texto n√£o termina at√© o Lula se eleger (Lula ladr√£o, roubou meu cora√ß√£o S2)

-- Resposta: funcao :: Int -> Char -> Float

-- Explica√ß√£o: Lendo o Enunciado:
--             ... **Tem como entrada um inteiro e um char** ...

--             Ent√£o, √© uma fun√ß√£o com dois argumentos tal que o primeiro √© um Int-eiro e o segundo um Char (Caractere):
--             funcao :: Int -> Char -> <Tipo da Fun√ß√£o> 

--             ... **e devolve um float**

--             Logo, o tipo da fun√ß√£o √© Float:
--             funcao :: Int -> Char -> Float

--             Chegamos no resultado! (>‚Äø‚ó†)‚úå

-- Passando para a 2¬∞ Quest√£o de fixa√ß√£o.

-- Escreva as declara√ß√µes e defini√ß√µes de fun√ß√µes para :
-- a. Dados dois inteiros, retornar o triplo da divis√£o inteira destes n√∫meros

-- Resultado: triploDivInt :: Int -> Int -> Int
--            triploDivInt x y = 3 * div x y

-- Explica√ß√£o: Lendo o enunciado:
--             **Dado dois inteiros** ...

--             Temos que essa fun√ß√£o tem dois argumentos, e ambos s√£o Int-eiros:

--             <Nome da Fun√ß√£o> :: Int -> Int -> <Tipo da Fun√ß√£o>

--             Lendo o resto do enunciado:

--             ... **retornar o triplo da divis√£o inteira destes n√∫meros**

--             Desse peda√ßo podemos extrair 3 coisas, um nome apropiado para a fun√ß√£o,
--             como o corpo da fun√ß√£o funciona, e consequentemente, o tipo da fun√ß√£o,

--             Como a fun√ß√£o retorna o **TRIPLO da DIVis√£o INTeira**, vou nomeala:

--             triploDivInt

--             Sobre o tipo da fun√ß√£o, precisamos analizar o que ocorre no corpo dela,
--             Ele faz o Triplo da divis√£o inteira. Ou seja:

--             primeiro, ela calcula a divis√£o inteira
--             segundo e ultimo, ela retorna o triplo do resultado dessa divis√£o inteira

--             Uma divis√£o inteira equivale a um valor do tipo Int-eiro
--             e o triplo de um valor Int-eiro ainda √© inteiro!

--             Logo, o tipo da fun√ß√£o √© Int-eiro! ·ïô(`‚ñø¬¥)·ïó

--             Agora temos completa a defini√ß√£o da fun√ß√£o:

--             triploDivInt :: Int -> Int -> Int

--             Agora Vamos fazer a fun√ß√£o em si:

--             triploDivInt x y = <Corpo da Fun√ß√£o>

--             Lembre sempre de checar se o nome da fun√ß√£o est√° igual na Defini√ß√£o e nela em si!
--             A quest√£o j√° nos passou o que a fun√ß√£o faz:

--             ... **retornar o triplo da divis√£o inteira destes n√∫meros**

--             usamos isso para definir o tipo da fun√ß√£o, ao destrinchar como ela funciona.
--             Pera... N√≥s j√° destrinchamos como ela funciona!

--             primeiro, ela calcula a divis√£o inteira
--             segundo e ultimo, ela retorna o triplo do resultado dessa divis√£o inteira

--             Vamos usar isso para criar o corpo da nossa fun√ß√£o.

--             Primeiro calculamos a divis√£o inteira de x por y.
--             Para isso usaremos uma outra fun√ß√£o j√° existente: div

--             div √© uma fun√ß√£o que retorna o quociente de um divis√£o inteira
--             div x y equivale ao quociente da divis√£o inteira de x por y

--             Ent√£o j√° temos a primeira parte:

--             div x y

--             Vamos para a segunda parte:
--             Agora retornaremos o triplo dessa divis√£o inteira, ou seja:

--             3 * div x y

--             Esse era o ultimo passo, ent√£o essa express√£o acima √© o corpo da fun√ß√£o! (‚ï•Ô∏£Ôπè·∑Ö‚ï•)
--             Chega fiquei emocionado

--             ent√£o temos a resposta:

--             triploDivInt :: Int -> Int -> Int
--             triploDivInt x y = 3 * div x y

-- Vou passar para as proximas quest√µes pois eu preciso chegar nos assuntos mais avan√ßados logo, ok? (>‚Äø‚ó†)‚úå

-- [ Aula 6 -> Fun√ß√µes, Operadores e Casamento de Padr√µes ] -------------------------------------------------------------------------------------------------------------------------------

-- Aqui temos bastante assunto, ent√£o coitado de mim  ‚îª‚îÅ‚îª Ô∏µ„ÉΩ(`‚ñ≠¬¥)ÔæâÔ∏µÔªø ‚îª‚îÅ‚îª

-- Quest√£o:  Elabore as seguintes fun√ß√µes e depois avalie‚Äìas em alguns casos:
-- a. Dados tr√™s n√∫meros, determine se todos s√£o diferentes.

-- Resposta: tresSaoDiferentes :: Float -> Float -> Float -> Bool
--           tresSaoDiferentes x y z = x /= y && y /= z && z /= x

-- Explica√ß√£o: Como sempre, iniciamos pela defini√ß√£o da fun√ß√£o.
--             Lendo o enunciado:

--             **Dado tr√™s n√∫meros** ...

--             Aqui ja temos que:

--             <Nome da Fun√ß√£o> :: Float -> Float -> Float -> <Tipo da Fun√ß√£o>

--             Porque Float e n√£o Int? Bem, o enunciado n√£o expecificou o tipo exato, e nem √© possivel inferir pelo corpo da fun√ß√£o (que veremos mais √† frente)
--             Ent√£o usamos o Tipo Mais abrangente, que, nesse caso, √© o Float.

--             Continuando com o enunciado:

--             **determine se todos (os n√∫meros) s√£o diferentes**

--             Aqui √© mais ambiguo que no exemplo anterior, n√£o temos como a fun√ß√£o funciona de forma explicita, porem podemos inferir q o tipo da fun√ß√£o ser√° Bool.
--             Eu explico, precisamos determinar se tr√™s n√∫meros s√£o diferentes, tr√™s numeros serem diferentes entre s√≠ √© de um valor bin√°rio, ou seja
--             ou Tr√™s n√∫meros s√£o diferentes, ou Tr√™s n√∫meros n√£o s√£o diferentes, n√£o h√° meio termo!

--             Qual Tipo que se encaixa? Bool.

--             <Nome da Fun√ß√£o> :: Float -> Float -> Float -> Bool

--             Com esse peda√ßo do enunciado podemos conseguir tambem um nome apropriado para a fun√ß√£o, aqui escolhi:

--             tresSaoDiferentes

--             Obs: Quando trabalhamos com fun√ß√µes do tipo Bool, √© interessante que o nome da fun√ß√£o seja algum tipo de pergunta de Sim ou N√£o,
--                  Assim criamos uma din√¢mica de Pergunta (Nome da fun√ß√£o) - Resposta (Valor da Fun√ß√£o)

--             tresSaoDiferentes :: Float -> Float -> Float -> Bool

--             Temos a Defini√ß√£o da Fun√ß√£o! ‚ù§Ôºà„Å£Ôºæ‚ñøÔºæÔºâ

--             Agora vamos para o corpo da fun√ß√£o

--             tresSaoDiferentes :: Float -> Float -> Float -> Bool
--             tresSaoDiferentes x y z = <Corpo da Fun√ß√£o>

--             Aqui Papis n√£o nos deu como fazer o corpo, apenas o que ele quer q a fun√ß√£o retorne. Ent√£o a quest√£o √© mais dif√≠cil.
--             Mas voc√™ n√£o precisa chorar no banheiro em posi√ß√£o fetal! Vamos nos outros exemplos fomos de baixo pra cima (Bottom Up)
--             Agora vamos de Cima para baixo (Top Down)

--             o que queremos? Um algoritmo que me diga se tr√™s numeros s√£o diferentes entre si
--             Nesses casos em que o Tipo da Fun√ß√£o √© Bool, sempre pensamos em como tornar fun√ß√£o Verdade, para isso, precisamos saber se:

--             x √© diferente de y
--             y √© diferente de z
--             z √© diferente de x

--             Se tudo isso for verdade, ent√£o x, y e z s√£o todos diferentes entre si!
--             E para checar se dois numeros s√£o diferentes temos um operador: /=
--             Que equivale a True caso os dois valores sejam diferentes 
--             e √† False caso sem iguais.
--             Temos as ferramentas necess√°rias, vamos √† luta! üí™ (‚Ä¢Ô∏°ÁõäÔ∏†‚Ä¢) üëä

--             Agora temos todos os passos:

--             Primeiro, checamos se x √© diferente de y.
--             Segundo, checamos se y √© diferente de z.
--             Terceiro, checamos se z √© diferente de x.
--             Quarto e Ultimo, checamos se Todas as tr√™s checagens acima s√£o verdadeiras ao mesmo tempo.

--             para checar se x √© diferente de y, escrevemos:

--             x /= y

--             Para checar se y √© diferente de z, escrevemos:

--             y /= z

--             Para checar se z √© diferente de x, escrevemos:

--             z /= x

--             Agora precisamos chegar se tudo isso √© Verdadeiro ao mesmo temp...
--             Pere a√≠, todas essas checagem equivalem √† ou True ou False, Tipo Bool.
--             Logo podemos usar matem√°tica de bool!

--             Nossa fun√ß√£o deve equivaler a True quando x for diferente de y E y for diferente de z E z for diferente de x
--             E E E, temos um operador Booleano pra Isso!: && (…î‚óî‚Äø‚óî)…î ‚ô•

--             Esse operador equivale a True apenas quando ambos seus lados equivalerem a True, e √† False caso ao menos Um seja False

--             ent√£o temos o seguinte:

--             x /= y && y /= z && z /= x

--             temos o Corpo! („ÜÜ_„ÜÜ)

--             Ent√£o a fun√ß√£o ficou assim:

--             tresSaoDiferente :: Float -> Float -> Float -> Bool
--             tresSaoDiferente x y z = x /= y && y /= z && z /= x

--             Chegamos na resposta! („Å£Ôºæ‚ñøÔºæ)€∂üç∏üåüüç∫Ÿ©(Àò‚ó°Àò )

-- 